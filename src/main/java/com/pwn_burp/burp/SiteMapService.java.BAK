package com.pwn_burp.burp;

import burp.*;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.core.Annotations;
import burp.api.montoya.core.ByteArray;
import burp.api.montoya.core.HighlightColor;
import burp.api.montoya.http.HttpService;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.responses.HttpResponse;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.sitemap.SiteMap;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.pwn_burp.api.models.SiteMapMessage;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class SiteMapService {
    private final MontoyaApi api;

    public SiteMapService(MontoyaApi api) {
        this.api = api;
    }

    public String getSiteMap(String urlPrefix) {
        JsonArray maps = new JsonArray();
        api.siteMap().requestResponses().forEach(item -> {
            if (urlPrefix.isEmpty() || (item.request() != null && item.request().url() != null && item.request().url().startsWith(urlPrefix))) {
                JsonObject obj = new JsonObject();
                JsonObject requestObj = new JsonObject();
                api.logging().logToOutput("SiteMapService: Processing item with URL: " + (item.request() != null ? item.request().url() : "null"));
                String requestBase64 = item.request() != null ? Base64.getEncoder().encodeToString(item.request().toByteArray().getBytes()) : null;
                api.logging().logToOutput("SiteMapService: Encoding request to Base64: " + requestBase64);
                requestObj.addProperty("raw", requestBase64);
                String path = item.request() != null ? item.request().path() : "";
                requestObj.addProperty("path", path);
                obj.add("request", requestObj);
                String responseBase64 = item.response() != null ? Base64.getEncoder().encodeToString(item.response().toByteArray().getBytes()) : null;
                obj.addProperty("response", responseBase64);
                String highlight = item.annotations() != null && item.annotations().highlightColor() != null ? item.annotations().highlightColor().toString() : "";
                obj.addProperty("highlight", highlight);
                String comment = item.annotations() != null && item.annotations().notes() != null ? item.annotations().notes() : "";
                obj.addProperty("comment", comment);
                JsonObject serviceObj = new JsonObject();
                HttpService httpService = item.httpService();
                serviceObj.addProperty("host", httpService != null && httpService.host() != null ? httpService.host() : "");
                serviceObj.addProperty("port", httpService != null ? httpService.port() : 0);
                serviceObj.addProperty("protocol", httpService != null ? (httpService.secure() ? "https" : "http") : "");
                obj.add("http_service", serviceObj);
                maps.add(obj);
            }
        });
        api.logging().logToOutput("SiteMapService: Retrieved " + maps.toString());
        return maps.toString();
    }

    public void addToSiteMap(SiteMapMessage message) {
        if (message == null || message.getRequest() == null || message.getRequest().getRaw() == null) {
            api.logging().logToError("Invalid SiteMapMessage: request and request.raw are required");
            throw new IllegalArgumentException("SiteMapMessage and request.raw cannot be null");
        }

        try {
            // Decode Base64 request
            byte[] requestBytes = Base64.getDecoder().decode(message.getRequest().getRaw());
            ByteArray requestByteArray = ByteArray.byteArray(requestBytes);

            // Construct HttpService from http_service
            SiteMapMessage.HttpService httpService = message.getHttpService();
            if (httpService == null || httpService.getHost() == null || httpService.getProtocol() == null) {
                api.logging().logToError("HttpService is required with host and protocol");
                throw new IllegalArgumentException("HttpService, host, and protocol cannot be null");
            }
            boolean secure = httpService.getProtocol().equalsIgnoreCase("https");
            HttpService montoyaHttpService = HttpService.httpService(httpService.getHost(), httpService.getPort(), secure);

            // Create HttpRequest
            HttpRequest httpRequest = HttpRequest.httpRequest(montoyaHttpService, requestByteArray);

            // Decode Base64 response (if provided)
            HttpResponse httpResponse = null;
            if (message.getResponse() != null && !message.getResponse().isEmpty()) {
                byte[] responseBytes = Base64.getDecoder().decode(message.getResponse());
                ByteArray responseByteArray = ByteArray.byteArray(responseBytes);
                httpResponse = HttpResponse.httpResponse(responseByteArray);
            }

            // Create Annotations object for comment and highlight
            Annotations annotations = Annotations.annotations();
            if (message.getComment() != null && !message.getComment().isEmpty()) {
                annotations = annotations.withNotes(message.getComment());
            }
            if (message.getHighlight() != null && !message.getHighlight().isEmpty() && !message.getHighlight().equals("NONE")) {
                try {
                    HighlightColor highlightColor = HighlightColor.valueOf(message.getHighlight().toUpperCase());
                    annotations = annotations.withHighlightColor(highlightColor);
                } catch (IllegalArgumentException e) {
                    api.logging().logToError("Invalid highlight color: " + message.getHighlight());
                    // Continue without setting highlight color
                }
            }

            // Create HttpRequestResponse object with annotations
            HttpRequestResponse requestResponse = HttpRequestResponse.httpRequestResponse(
                httpRequest,
                httpResponse,
                annotations
            );

            // Add to sitemap
            api.siteMap().add(requestResponse);

            api.logging().logToOutput("Added sitemap entry for " + httpRequest.url() +
                                     " with comment: " + message.getComment() +
                                     ", highlight: " + message.getHighlight());
        } catch (IllegalArgumentException e) {
            api.logging().logToError("Failed to decode Base64 or create request/response: " + e.getMessage());
            throw new RuntimeException("Failed to add sitemap entry", e);
        } catch (Exception e) {
            api.logging().logToError("Failed to add sitemap entry: " + e.getMessage());
            throw new RuntimeException("Failed to add sitemap entry", e);
        }
    }
}
