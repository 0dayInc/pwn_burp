package com.pwn_burp.burp;

import burp.*;
import burp.api.montoya.MontoyaApi;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.pwn_burp.api.models.ProxyListener;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.lang.reflect.Method;

public class ProxyService {
    private final MontoyaApi api;
    private final IBurpExtenderCallbacks callbacks;

    public ProxyService(MontoyaApi api, IBurpExtenderCallbacks callbacks) {
        this.api = api;
        this.callbacks = callbacks;
        if (this.callbacks == null) {
            throw new IllegalArgumentException("IBurpExtenderCallbacks cannot be null");
        }
    }

    public String getProxyHistory() {
        JsonArray history = new JsonArray();
        api.proxy().history().forEach(item -> {
            JsonObject obj = new JsonObject();
            String requestBase64 = item.request() != null ? Base64.getEncoder().encodeToString(item.request().toByteArray().getBytes()) : null;
            obj.addProperty("request", requestBase64);
            String responseBase64 = item.response() != null ? Base64.getEncoder().encodeToString(item.response().toByteArray().getBytes()) : null;
            obj.addProperty("response", responseBase64);
            history.add(obj);
        });
        return history.toString();
    }

    public void setProxyInterceptionEnabled(boolean enabled) {
        if (enabled) {
            api.proxy().enableIntercept();
        } else {
            api.proxy().disableIntercept();
        }
    }

    public List<IProxyListener> getProxyListeners() {
        try {
            List<IProxyListener> listeners = callbacks.getProxyListeners();
            if (listeners == null) {
                api.logging().logToOutput("callbacks.getProxyListeners() returned null");
                return new ArrayList<>();
            }
            api.logging().logToOutput("Found " + listeners.size() + " listeners");
            return listeners;
        } catch (Exception e) {
            api.logging().logToError("Failed to get proxy listeners: " + e.getMessage());
            e.printStackTrace();
            return new ArrayList<>();
        }
    }

    public boolean addProxyListener(String bindAddress, int port) {
        api.logging().logToOutput("Adding proxy listener is not supported in Montoya API: " + bindAddress + ":" + port);
        return false;
    }

    public boolean updateProxyListener(String id, String bindAddress, int port) {
        try {
            Class<?> proxyManagerClass = Class.forName("burp.ProxyListenerManager");
            Method getInstanceMethod = proxyManagerClass.getMethod("getInstance");
            Object proxyManager = getInstanceMethod.invoke(null);
            Method updateListenerMethod = proxyManagerClass.getMethod("updateListener", String.class, String.class, int.class);
            updateListenerMethod.invoke(proxyManager, id, bindAddress, port);
            api.logging().logToOutput("Updated proxy listener: " + id + " to " + bindAddress + ":" + port);
            return true;
        } catch (Exception e) {
            api.logging().logToError("Failed to update proxy listener via reflection: " + e.getMessage());
            return false;
        }
    }

    public boolean deleteProxyListener(String id) {
        api.logging().logToOutput("Deleting proxy listener is not supported in Montoya API: " + id);
        return false;
    }
}
